// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sptfy.proto

/*
Package sptfyapi is a generated protocol buffer package.

It is generated from these files:
	sptfy.proto

It has these top-level messages:
	TrackSearchRequest
	TrackSearchResponse
	TrackResult
	AlbumSearchRequest
	AlbumSearchResponse
	AlbumResult
	ArtistSearchRequest
	ArtistSearchResponse
	ArtistResult
*/
package sptfyapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TrackSearchRequest struct {
	Query    string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Pagesize uint32 `protobuf:"varint,2,opt,name=pagesize" json:"pagesize,omitempty"`
	Pagenum  uint32 `protobuf:"varint,3,opt,name=pagenum" json:"pagenum,omitempty"`
}

func (m *TrackSearchRequest) Reset()                    { *m = TrackSearchRequest{} }
func (m *TrackSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*TrackSearchRequest) ProtoMessage()               {}
func (*TrackSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TrackSearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *TrackSearchRequest) GetPagesize() uint32 {
	if m != nil {
		return m.Pagesize
	}
	return 0
}

func (m *TrackSearchRequest) GetPagenum() uint32 {
	if m != nil {
		return m.Pagenum
	}
	return 0
}

type TrackSearchResponse struct {
	Results []*TrackResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *TrackSearchResponse) Reset()                    { *m = TrackSearchResponse{} }
func (m *TrackSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*TrackSearchResponse) ProtoMessage()               {}
func (*TrackSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TrackSearchResponse) GetResults() []*TrackResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type TrackResult struct {
	Suri     string `protobuf:"bytes,1,opt,name=suri" json:"suri,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Artist   string `protobuf:"bytes,3,opt,name=artist" json:"artist,omitempty"`
	Album    string `protobuf:"bytes,4,opt,name=album" json:"album,omitempty"`
	Spftytag string `protobuf:"bytes,5,opt,name=spftytag" json:"spftytag,omitempty"`
	Metadata []byte `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *TrackResult) Reset()                    { *m = TrackResult{} }
func (m *TrackResult) String() string            { return proto.CompactTextString(m) }
func (*TrackResult) ProtoMessage()               {}
func (*TrackResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TrackResult) GetSuri() string {
	if m != nil {
		return m.Suri
	}
	return ""
}

func (m *TrackResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrackResult) GetArtist() string {
	if m != nil {
		return m.Artist
	}
	return ""
}

func (m *TrackResult) GetAlbum() string {
	if m != nil {
		return m.Album
	}
	return ""
}

func (m *TrackResult) GetSpftytag() string {
	if m != nil {
		return m.Spftytag
	}
	return ""
}

func (m *TrackResult) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type AlbumSearchRequest struct {
	Query    string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Pagesize uint32 `protobuf:"varint,2,opt,name=pagesize" json:"pagesize,omitempty"`
	Pagenum  uint32 `protobuf:"varint,3,opt,name=pagenum" json:"pagenum,omitempty"`
}

func (m *AlbumSearchRequest) Reset()                    { *m = AlbumSearchRequest{} }
func (m *AlbumSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*AlbumSearchRequest) ProtoMessage()               {}
func (*AlbumSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AlbumSearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *AlbumSearchRequest) GetPagesize() uint32 {
	if m != nil {
		return m.Pagesize
	}
	return 0
}

func (m *AlbumSearchRequest) GetPagenum() uint32 {
	if m != nil {
		return m.Pagenum
	}
	return 0
}

type AlbumSearchResponse struct {
	Results []*ArtistResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *AlbumSearchResponse) Reset()                    { *m = AlbumSearchResponse{} }
func (m *AlbumSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*AlbumSearchResponse) ProtoMessage()               {}
func (*AlbumSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AlbumSearchResponse) GetResults() []*ArtistResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type AlbumResult struct {
	Suri     string `protobuf:"bytes,1,opt,name=suri" json:"suri,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Artist   string `protobuf:"bytes,3,opt,name=artist" json:"artist,omitempty"`
	Sptfytag string `protobuf:"bytes,4,opt,name=sptfytag" json:"sptfytag,omitempty"`
	Metadata []byte `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *AlbumResult) Reset()                    { *m = AlbumResult{} }
func (m *AlbumResult) String() string            { return proto.CompactTextString(m) }
func (*AlbumResult) ProtoMessage()               {}
func (*AlbumResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AlbumResult) GetSuri() string {
	if m != nil {
		return m.Suri
	}
	return ""
}

func (m *AlbumResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AlbumResult) GetArtist() string {
	if m != nil {
		return m.Artist
	}
	return ""
}

func (m *AlbumResult) GetSptfytag() string {
	if m != nil {
		return m.Sptfytag
	}
	return ""
}

func (m *AlbumResult) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type ArtistSearchRequest struct {
	Query    string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Pagesize uint32 `protobuf:"varint,2,opt,name=pagesize" json:"pagesize,omitempty"`
	Pagenum  uint32 `protobuf:"varint,3,opt,name=pagenum" json:"pagenum,omitempty"`
}

func (m *ArtistSearchRequest) Reset()                    { *m = ArtistSearchRequest{} }
func (m *ArtistSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*ArtistSearchRequest) ProtoMessage()               {}
func (*ArtistSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ArtistSearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *ArtistSearchRequest) GetPagesize() uint32 {
	if m != nil {
		return m.Pagesize
	}
	return 0
}

func (m *ArtistSearchRequest) GetPagenum() uint32 {
	if m != nil {
		return m.Pagenum
	}
	return 0
}

type ArtistSearchResponse struct {
	Results []*ArtistResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ArtistSearchResponse) Reset()                    { *m = ArtistSearchResponse{} }
func (m *ArtistSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*ArtistSearchResponse) ProtoMessage()               {}
func (*ArtistSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ArtistSearchResponse) GetResults() []*ArtistResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type ArtistResult struct {
	Suri     string `protobuf:"bytes,1,opt,name=suri" json:"suri,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Sptytag  string `protobuf:"bytes,3,opt,name=sptytag" json:"sptytag,omitempty"`
	Metadata []byte `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *ArtistResult) Reset()                    { *m = ArtistResult{} }
func (m *ArtistResult) String() string            { return proto.CompactTextString(m) }
func (*ArtistResult) ProtoMessage()               {}
func (*ArtistResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ArtistResult) GetSuri() string {
	if m != nil {
		return m.Suri
	}
	return ""
}

func (m *ArtistResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ArtistResult) GetSptytag() string {
	if m != nil {
		return m.Sptytag
	}
	return ""
}

func (m *ArtistResult) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*TrackSearchRequest)(nil), "sptfyapi.TrackSearchRequest")
	proto.RegisterType((*TrackSearchResponse)(nil), "sptfyapi.TrackSearchResponse")
	proto.RegisterType((*TrackResult)(nil), "sptfyapi.TrackResult")
	proto.RegisterType((*AlbumSearchRequest)(nil), "sptfyapi.AlbumSearchRequest")
	proto.RegisterType((*AlbumSearchResponse)(nil), "sptfyapi.AlbumSearchResponse")
	proto.RegisterType((*AlbumResult)(nil), "sptfyapi.AlbumResult")
	proto.RegisterType((*ArtistSearchRequest)(nil), "sptfyapi.ArtistSearchRequest")
	proto.RegisterType((*ArtistSearchResponse)(nil), "sptfyapi.ArtistSearchResponse")
	proto.RegisterType((*ArtistResult)(nil), "sptfyapi.ArtistResult")
}

func init() { proto.RegisterFile("sptfy.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcf, 0x4e, 0xe3, 0x30,
	0x10, 0xc6, 0x95, 0x6d, 0xfa, 0x6f, 0xd2, 0xbd, 0xb8, 0xdd, 0xca, 0xaa, 0xb6, 0x52, 0xd4, 0x53,
	0x4e, 0xdd, 0x55, 0x78, 0x82, 0x5e, 0x00, 0x21, 0x4e, 0x2e, 0x0f, 0x80, 0x1b, 0xdc, 0x12, 0xd1,
	0xb4, 0xa9, 0xed, 0x20, 0x95, 0x3b, 0x4f, 0xc1, 0xcb, 0xa2, 0x8c, 0x93, 0x12, 0xa7, 0x20, 0x01,
	0xa2, 0x37, 0x7f, 0xfe, 0x2c, 0x7f, 0x33, 0xbf, 0x8c, 0x03, 0x9e, 0x4a, 0xf5, 0x72, 0x3f, 0x4d,
	0xe5, 0x56, 0x6f, 0x49, 0x07, 0x05, 0x4f, 0xe3, 0xc9, 0x2d, 0x90, 0x1b, 0xc9, 0xa3, 0x87, 0xb9,
	0xe0, 0x32, 0xba, 0x67, 0x62, 0x97, 0x09, 0xa5, 0xc9, 0x00, 0x9a, 0xbb, 0x4c, 0xc8, 0x3d, 0x75,
	0x7c, 0x27, 0xe8, 0x32, 0x23, 0xc8, 0x08, 0x3a, 0x29, 0x5f, 0x09, 0x15, 0x3f, 0x09, 0xfa, 0xcb,
	0x77, 0x82, 0xdf, 0xec, 0xa0, 0x09, 0x85, 0x76, 0xbe, 0xde, 0x64, 0x09, 0x6d, 0xa0, 0x55, 0xca,
	0xc9, 0x39, 0xf4, 0xad, 0x04, 0x95, 0x6e, 0x37, 0x4a, 0x90, 0x7f, 0xd0, 0x96, 0x42, 0x65, 0x6b,
	0xad, 0xa8, 0xe3, 0x37, 0x02, 0x2f, 0xfc, 0x33, 0x2d, 0x8b, 0x9a, 0xe2, 0x79, 0x86, 0x2e, 0x2b,
	0x4f, 0x4d, 0x5e, 0x1c, 0xf0, 0x2a, 0x06, 0x21, 0xe0, 0xaa, 0x4c, 0xc6, 0x45, 0x89, 0xb8, 0xce,
	0xf7, 0x36, 0x3c, 0x31, 0xd5, 0x75, 0x19, 0xae, 0xc9, 0x10, 0x5a, 0x5c, 0xea, 0x58, 0x69, 0x2c,
	0xac, 0xcb, 0x0a, 0x95, 0xf7, 0xc8, 0xd7, 0x8b, 0x2c, 0xa1, 0xae, 0xe9, 0x11, 0x45, 0xde, 0xa3,
	0x4a, 0x97, 0x7a, 0xaf, 0xf9, 0x8a, 0x36, 0xd1, 0x38, 0xe8, 0xdc, 0x4b, 0x84, 0xe6, 0x77, 0x5c,
	0x73, 0xda, 0xf2, 0x9d, 0xa0, 0xc7, 0x0e, 0x3a, 0xe7, 0x38, 0xcb, 0x2f, 0x38, 0x1d, 0xc7, 0x0b,
	0xe8, 0x5b, 0x09, 0x05, 0xc7, 0xff, 0x75, 0x8e, 0xc3, 0x37, 0x8e, 0x33, 0xec, 0xb4, 0x0e, 0xf2,
	0xd9, 0x01, 0x0f, 0x6f, 0xfa, 0x21, 0x90, 0x88, 0x4c, 0x2f, 0x11, 0x99, 0x5b, 0x22, 0x33, 0xda,
	0x42, 0xd6, 0xac, 0x21, 0xe3, 0xd0, 0x37, 0x05, 0x9e, 0x8e, 0xd9, 0x25, 0x0c, 0xec, 0x88, 0x6f,
	0x43, 0x5b, 0x43, 0xaf, 0x6a, 0x7c, 0x1a, 0x1a, 0x85, 0xb6, 0x4a, 0xcd, 0x38, 0x19, 0x6a, 0xa5,
	0xb4, 0xd0, 0xb8, 0x36, 0x9a, 0xd0, 0x7e, 0x95, 0x73, 0x21, 0x1f, 0xe3, 0x48, 0x90, 0x2b, 0xf0,
	0xcc, 0x06, 0x7a, 0xe4, 0x6f, 0xed, 0xc1, 0x58, 0x18, 0x47, 0xe3, 0x0f, 0x5c, 0x43, 0x20, 0xb4,
	0xe7, 0xf5, 0x28, 0x01, 0xbd, 0x6a, 0xc2, 0xf1, 0x70, 0x57, 0x13, 0xde, 0x19, 0xcc, 0x30, 0xb2,
	0x3f, 0x6f, 0x19, 0x71, 0x0d, 0xbd, 0x22, 0xc2, 0x4c, 0xcf, 0xb8, 0x4e, 0xfe, 0x2b, 0x21, 0x8b,
	0x16, 0xfe, 0xcf, 0xce, 0x5e, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x46, 0xc2, 0xa9, 0xde, 0x04,
	0x00, 0x00,
}
